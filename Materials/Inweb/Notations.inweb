Notation "Inweb" {
	legacy name "2"
	
	use key-value pairs
	use purpose under heading
	use syntax redeclaration
	use explicit section headings
	use paragraph tags
	use footnotes with [ and ]
	use named holons with @< and @>
	use tangler commands with [[ and ]]
	
	classify {
		[SECOND] MATERIAL.                          ==> sectiontitle if on first line
		MATERIAL.                                   ==> sectiontitle if on first line
	
		@d MATERIAL(NONWHITESPACE) SECOND           ==> definition
		@d MATERIAL                                 ==> definition
		@define MATERIAL(NONWHITESPACE) SECOND      ==> definition
		@default MATERIAL(NONWHITESPACE) SECOND     ==> defaultdefinition
		@default MATERIAL                           ==> defaultdefinition
		@e MATERIAL(NONWHITESPACE) from SECOND      ==> enumeration
		@enum MATERIAL(NONWHITESPACE) from SECOND   ==> enumeration
		@e MATERIAL                                 ==> enumeration
		@enum MATERIAL                              ==> enumeration
	
		@<MATERIAL@>=                               ==> namedcodefragment
		@<MATERIAL@> =                              ==> namedcodefragment
	
		@                                           ==> beginparagraph
		@=                                          ==> codeextract in new paragraph
		@ =                                         ==> codeextract in new paragraph
		@ RESIDUE                                   ==> beginparagraph
		@h MATERIAL.                                ==> beginparagraph
		@heading MATERIAL.                          ==> beginparagraph
		@h MATERIAL. RESIDUE                        ==> beginparagraph
		@heading MATERIAL. RESIDUE                  ==> beginparagraph
		@h MATERIAL                                 ==> error "no full stop after heading text"
		@heading MATERIAL                           ==> error "no full stop after heading text"
	
		>> MATERIAL                                 ==> quotation if not in extract context
	}
	
	residue of beginparagraph {
		RESIDUE ^"MATERIAL"                         ==> paragraphtag
		^"MATERIAL"                                 ==> paragraphtag
	}
	
	classify {
		=                                           ==> endextract if in extract context
		=                                           ==> codeextract if not in extract context
		= (code)                                    ==> codeextract
		= (early code)                              ==> earlycodeextract
		= (very early code)                         ==> veryearlycodeextract
		= (audio MATERIAL)                          ==> audio
		= (video MATERIAL)                          ==> video
		= (figure MATERIAL)                         ==> figure
		= (html MATERIAL)                           ==> html
		= (download MATERIAL "")                    ==> download
		= (download MATERIAL "SECOND")              ==> download
		= (download MATERIAL)                       ==> download
		= (embedded MATERIAL audio SECOND)          ==> embeddedvideo
		= (embedded MATERIAL video SECOND)          ==> embeddedvideo
		= (carousel)                                ==> carouselslide
		= (carousel "")                             ==> carouselslide
		= (carousel "MATERIAL")                     ==> carouselslide
		= (carousel "MATERIAL" above)               ==> carouselaboveslide
		= (carousel "MATERIAL" below)               ==> carouselbelowslide
		= (carousel end)                            ==> carouselend
	
		= (text)                                    ==> textextract
		= (text as code)                            ==> textascodeextract
		= (text as MATERIAL)                        ==> textextract
		= (text from SECOND as code)                ==> textascodeextract
		= (text from SECOND as MATERIAL)            ==> textextract
		= (text from SECOND)                        ==> textextract
		= (text to MATERIAL)                        ==> textextractto
		= (OPTIONS text)                            ==> textextract
		= (OPTIONS text as code)                    ==> textascodeextract
		= (OPTIONS text as MATERIAL)                ==> textextract
		= (OPTIONS text from SECOND as code)        ==> textascodeextract
		= (OPTIONS text from SECOND as MATERIAL)    ==> textextract
		= (OPTIONS text from SECOND)                ==> textextract
		= (OPTIONS text to MATERIAL)                ==> textextractto
	
		= (MATERIAL)                                ==> error "unknown extract or insertion"
	}
	
	options of textextract {
		hyperlinked                                 ==> hyperlinked
		undisplayed                                 ==> undisplayed
		hyperlinked OPTIONS                         ==> hyperlinked
		undisplayed OPTIONS                         ==> undisplayed
		MATERIAL                                    ==> error "unknown text option(s)"
	}
	
	options of textascodeextract {
		hyperlinked                                 ==> hyperlinked
		undisplayed                                 ==> undisplayed
		hyperlinked OPTIONS                         ==> hyperlinked
		undisplayed OPTIONS                         ==> undisplayed
		MATERIAL                                    ==> error "unknown text option(s)"
	}
	
	options of textextractto {
		hyperlinked                                 ==> hyperlinked
		undisplayed                                 ==> undisplayed
		hyperlinked OPTIONS                         ==> hyperlinked
		undisplayed OPTIONS                         ==> undisplayed
		MATERIAL                                    ==> error "unknown text option(s)"
	}
	
	classify {
		MATERIAL                                    ==> extract if in extract context
		MATERIAL                                    ==> definitioncontinued if in definition context
		MATERIAL                                    ==> commentary
	}
}

Notation "Markdown" {
	recognise .md
	set Paragraph Numbers Visibility: Off
	use Markdown commentary
	use Markdown shebang
	classify {
		# MATERIAL			==> titleandpurpose if on first line
		MATERIAL			==> commentary
	}
}
