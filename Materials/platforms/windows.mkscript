# This is "windows.mkscript", a script which defines build settings used in
# inweb, intest, inform and all of their subsidiary tools for the platform
# "windows". The maintainer of this file is David Kinder.

# To use, you will need to install Cygwin with the Mingw-w64 clang compiler.

# The script is used for two purposes. Firstly, it is used to generate the
# file "windows.mk" of platform settings. If an inweb user selects windows as
# platform on a first run, then this is the file copied into place as
# inweb/platform-settings.mk. But secondly, it also defines macros which
# can be used by any *.mkscript files being converted to *.mk files on
# this platform.

# Do not edit "windows.mk" directly. Instead, edit this script, and then
# rebuild "windows.mk" by setting the current working directory to the directory
# _above_ "inweb", and using the command:

# inweb/Tangled/inweb inweb -prototype inweb/Materials/platforms/windows.mkscript -makefile inweb/Materials/platforms/windows.mk

# Or simply:

# make -f inweb/inweb.mk makers

# which recreates all of the make-files in the inweb repository from their
# scripts, including windows.mk among them.

# See the inweb manual for documentation on the *.mkscript file format, i.e.,
# the format in which this file is written. But it is essentially just a makefile
# with a number of special macro and loop features whose syntax involves braces
# { ... }, so anywhere that you see braces, you're looking at something special
# to *.mkscript; anything else is straightforward make syntax.

# -----------------------------------------------------------------------------

# The first definition in this file must set INWEBPLATFORM to the platform
# name, which is the same as the leafname of this file without the ".mkscript"
# file extension. So:

INWEBPLATFORM = windows

# The I6 source code has its own set of symbolic names for operating systems,
# not always the same as inweb's names for platforms, so:

INFORM6OS = PC_WIN32

# On some platforms, executables have a specific file extension, which we define here:

EXEEXTENSION = .exe

# -----------------------------------------------------------------------------

# These are likely to be the same on all platforms:

INTEST = intest/Tangled/intest
INWEB = inweb/Tangled/inweb

# -----------------------------------------------------------------------------

# Now three macro definitions: two for compiling C code to *.o object files
# (one being strict about warnings, the other indulgently suppressing them);
# and one for linking those *.o files into an executable.

{define: compile to: TO from: FROM ?options: OPTS}
	clang -std=c11 -c $(MANYWARNINGS) $(CCOPTS) -g {OPTS} -o {TO} {FROM}
{end-define}

{define: compile-indulgently to: TO from: FROM ?options: OPTS}
	clang -std=c99 -c $(FEWERWARNINGS) $(CCOPTS) -g {OPTS} -o {TO} {FROM}
{end-define}

{define: link to: TO from: FROM ?options: OPTS}
	clang $(CCOPTS) -Wl,--stack,0x8000000 -g -o {TO} {FROM} {OPTS}
{end-define}

# Where:

CCOPTS = -DPLATFORM_WINDOWS=1 $(CFLAGS)

MANYWARNINGS = -Weverything -Wno-unknown-warning-option -Wno-pointer-arith -Wno-unused-macros -Wno-shadow -Wno-cast-align -Wno-variadic-macros -Wno-missing-noreturn -Wno-missing-prototypes -Wno-unused-parameter -Wno-padded -Wno-missing-variable-declarations -Wno-unreachable-code-break -Wno-class-varargs -Wno-format-nonliteral -Wno-cast-qual -Wno-double-promotion -Wno-comma -Wno-strict-prototypes -Wno-extra-semi-stmt -Wno-unreachable-code-return -Wno-unused-but-set-variable -Wno-declaration-after-statement -Wno-used-but-marked-unused -Wno-unsafe-buffer-usage -Wno-misleading-indentation -Wno-implicit-fallthrough -Wno-implicit-int-float-conversion -Wno-incompatible-function-pointer-types-strict -Wno-cast-function-type-strict -Wno-c99-compat -Wno-switch-default -ferror-limit=1000

FEWERWARNINGS = -Wno-implicit-int -Wno-dangling-else -Wno-pointer-sign -Wno-format-extra-args -Wno-tautological-compare -Wno-deprecated-declarations -Wno-logical-op-parentheses -Wno-format -Wno-extra-semi-stmt -Wno-c11-extensions -Wno-unreachable-code-return

