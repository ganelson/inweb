# This is "inweb.mkscript", a script used to generate the makefile "inweb.mk"
# used to build the tool "inweb". Do not edit "inweb.mk" directly. Instead,
# edit this script, and then rebuild "inweb.mk" with the command:

# inweb/Tangled/inweb make-makefile inweb -to inweb/inweb.mk

# See the inweb manual for documentation on the *.mkscript file format, i.e.,
# the format in which this file is written. But it is essentially just a makefile
# with a number of special macro and loop features whose syntax involves braces
# { ... }, so anywhere that you see braces, you're looking at something special
# to *.mkscript; anything else is straightforward make syntax.

# -----------------------------------------------------------------------------

# Note that the resulting makescript expects to be used from a current working
# directory which is the _one above_ "inweb", _not_ from "inweb" itself. So it
# should usually be invoked as e.g. "make -f inweb/inweb.mk".

# -----------------------------------------------------------------------------

# Variants of this file exist for each of the following supported platforms,
# generated from inweb.mkscript and Materials/platforms/PLATFORM.mkscript in
# each case; when a platform is selected by the scripts/first.sh shell script,
# the relevant one is copied to become inweb/inweb.mk.

{set name: PLATFORMS value: macos, macos32, macosarm, macosintel, macosuniv, windows, linux, unix}

# -----------------------------------------------------------------------------

{platform-settings}

ME = inweb
FTEST = $(ME)/foundation-test
LTEST = $(ME)/literate-test
LBUILD = $(ME)/licence-build
SAFETYCOPY = $(ME)/Tangled/inweb_dev

# The colony file for this collection of webs contains information about their
# paths, where they are woven to, and so on

COLONY = $(ME)/colony.inweb

-include $(ME)/platform-settings.mk

# Making the program:

.PHONY: all

all: $(ME)/platform-settings.mk $(LBUILD)/Tangled/licence-build $(ME)/Tangled/$(ME) $(FTEST)/Tangled/foundation-test $(LTEST)/Tangled/literate-test

$(LBUILD)/Tangled/licence-build: $(LBUILD)/Contents.w $(LBUILD)/Sections/*.w $(ME)/foundation-module/Contents.w $(ME)/foundation-module/Chapter*/*.w
	$(call make-licence-build)

$(ME)/Tangled/$(ME): $(ME)/Contents.w $(ME)/Chapter*/*.w $(ME)/foundation-module/Contents.w $(ME)/foundation-module/Chapter*/*.w
	$(call make-me)

$(FTEST)/Tangled/foundation-test: $(FTEST)/Contents.w $(FTEST)/Sections/*.w $(ME)/foundation-module/Contents.w $(ME)/foundation-module/Chapter*/*.w
	$(call make-ftest)

$(LTEST)/Tangled/literate-test: $(LTEST)/Contents.w $(LTEST)/Sections/*.w $(ME)/foundation-module/Contents.w $(ME)/foundation-module/Chapter*/*.w $(ME)/literate-module/Contents.w $(ME)/literate-module/Chapter*/*.w
	$(call make-ltest)

.PHONY: force
force: $(ME)/platform-settings.mk
	$(call make-me)
	$(call make-ftest)
	$(call make-ltest)
	$(call make-licence-build)

{define: make-settings platform: PLATFORM}
	$(INWEB) make-makefile -to $(ME)/Materials/platforms/{PLATFORM}.mk -script $(ME)/Materials/platforms/{PLATFORM}.mkscript
	$(INWEB) make-makefile -to $(ME)/Materials/platforms/inweb-on-{PLATFORM}.mk -platform {PLATFORM} -script $(ME)/scripts/inweb.mkscript
{end-define}

.PHONY: makers
makers:
	$(INWEB) make-makefile $(FTEST) -to $(FTEST)/foundation-test.mk
	$(INWEB) make-makefile $(LTEST) -to $(LTEST)/literate-test.mk
	$(INWEB) make-makefile $(LBUILD) -to $(LBUILD)/licence-build.mk
	{repeat with: PLATFORM in: {PLATFORMS}}
	{make-settings platform: {PLATFORM}}
	{end-repeat}

.PHONY: initial
initial: $(ME)/platform-settings.mk
	$(call make-me-once-tangled)
	$(call make-ftest)
	$(call make-ltest)
	$(call make-licence-build)

.PHONY: safe
safe:
	$(call make-me-using-safety-copy)

.PHONY: licences
licences:
	$(LBUILD)/Tangled/licence-build -from $(ME)/Materials/licenses.json >$(ME)/foundation-module/Chapter\ 7/SPDX\ Licences.w	

# One of inweb's tasks is to tangle webs: but since inweb is itself a web,
# that means it can only be compiled using itself. To avoid a logical
# impossibility, a ready-tangled inweb.c is supplied as part of the Core
# Inform tarball. The following builds inweb from this:

define make-me-once-tangled
	{compile from: $(ME)/Tangled/$(ME).c   to:   $(ME)/Tangled/$(ME).o}
	{link    from: $(ME)/Tangled/$(ME).o   to:   $(ME)/Tangled/$(ME)$(EXEEXTENSION)}
endef

# If inweb exists already, we can compile it using itself like so:

define make-me
	$(ME)/Tangled/$(ME) tangle $(ME)
	$(call make-me-once-tangled)
endef

# When developing inweb, it's all too easy to break it and therefore to get
# into a cleft stick: inweb has a bug, so it can't tangle inweb any more, and
# therefore the bug can't be fixed. To get around this, we maintain a spare
# copy of the inweb executable which is known to work. "make inwebdev" uses
# the safety copy of inweb to recompile inweb.

define make-me-using-safety-copy
	$(SAFETYCOPY) tangle $(ME)
	$(call make-me-once-tangled)
endef

# Now foundation-test...

define make-ftest
	$(INWEB) make-makefile $(FTEST) -to $(FTEST)/foundation-test.mk
	make -f $(FTEST)/foundation-test.mk force
endef

# And literate-test...

define make-ltest
	$(INWEB) make-makefile $(LTEST) -to $(LTEST)/literate-test.mk
	make -f $(LTEST)/literate-test.mk force
endef

# And licence-build...

define make-licence-build
	$(INWEB) make-makefile $(LBUILD) -to $(LBUILD)/licence-build.mk
	make -f $(LBUILD)/licence-build.mk force
endef

# Testing the program - which requires intest to be installed too.

.PHONY: test
test:
	$(INTEST) -from $(ME) all
	$(INTEST) -from $(FTEST) all
	$(INTEST) -from $(LTEST) all

# "make commit" should be used only by the Benevolent Overlord of Inweb.
# It updates the build code and commits to the repository.

.PHONY: commit
commit:
	$(INWEB) advance-build $(ME)
	$(INWEB) make-readme $(ME)
	cd $(ME); git commit -a

# Weaving the web for GitHub Pages:

.PHONY: pages
pages:
	$(INWEB) help > $(ME)/Figures/help.txt
	$(INWEB) inspect -resources > $(ME)/Figures/languages.txt
	$(INWEB) inspect -colony $(COLONY) -member twinprimes -scan > $(ME)/Figures/scan.txt
	$(INWEB) weave -colony $(COLONY) -member twinprimes -as TestingInweb -to $(ME)/Figures/tree.txt
	cp -f $(COLONY) $(ME)/Figures/colony.txt
	$(INWEB) advance-build $(ME)
	mkdir -p $(ME)/docs
	rm -f $(ME)/docs/*.html
	mkdir -p $(ME)/docs/docs-assets
	rm -f $(ME)/docs/docs-assets/*.css
	rm -f $(ME)/docs/docs-assets/*.png
	rm -f $(ME)/docs/docs-assets/*.gif
	cp -f $(ME)/docs-src/Octagram.png $(ME)/docs/docs-assets/Octagram.png
	$(INWEB) make-readme $(ME)
	mkdir -p $(ME)/docs/inweb
	rm -f $(ME)/docs/inweb/*.html
	mkdir -p $(ME)/docs/goldbach
	rm -f $(ME)/docs/goldbach/*.html
	mkdir -p $(ME)/docs/twinprimes
	rm -f $(ME)/docs/twinprimes/*.html
	mkdir -p $(ME)/docs/eastertide
	rm -f $(ME)/docs/eastertide/*.html
	mkdir -p $(ME)/docs/foundation-module
	rm -f $(ME)/docs/foundation-module/*.html
	mkdir -p $(ME)/docs/foundation-test
	rm -f $(ME)/docs/foundation-test/*.html
	$(INWEB) weave -colony $(COLONY) -member overview
	$(INWEB) weave -colony $(COLONY) -member goldbach
	$(INWEB) weave -colony $(COLONY) -member goldbach -as Plain        -to inweb/docs/goldbach/goldbach.txt
	$(INWEB) weave -colony $(COLONY) -member goldbach -as TestingInweb -to inweb/docs/goldbach/goldbach-test.txt
	$(INWEB) weave -colony $(COLONY) -member goldbach -as PDFTeX       -to inweb/docs/goldbach/goldbach.pdf
	$(INWEB) weave -colony $(COLONY) -member goldbach -as TeX          -to inweb/docs/goldbach/goldbach.tex
	$(INWEB) weave -colony $(COLONY) -member twinprimes
	$(INWEB) weave -colony $(COLONY) -member eastertide
	$(INWEB) weave -colony $(COLONY) -member inweb
	$(INWEB) weave -colony $(COLONY) -member foundation
	$(INWEB) weave -colony $(COLONY) -member foundation-test
	$(INWEB) weave -colony $(COLONY) -member literate
	$(INWEB) weave -colony $(COLONY) -member literate-test

# Cleaning up:

.PHONY: clean
clean:
	$(call clean-up)

.PHONY: purge
purge:
	$(call clean-up)

# Note that the tangled inweb.c is not cleaned up: it's needed to bootstrap
# the use of inweb from a fresh installation where there's no executable
# inweb yet with which to tangle inweb.c (see below).

define clean-up
	rm -f $(ME)/Tangled/*.o
	rm -f $(ME)/Tangled/*.h
endef
